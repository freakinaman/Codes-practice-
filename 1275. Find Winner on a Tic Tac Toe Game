1275. Find Winner on a Tic Tac Toe Game
Solved
Easy
Topics
Companies
Hint
Tic-tac-toe is played by two players A and B on a 3 x 3 grid. The rules of Tic-Tac-Toe are:

Players take turns placing characters into empty squares ' '.
The first player A always places 'X' characters, while the second player B always places 'O' characters.
'X' and 'O' characters are always placed into empty squares, never on filled ones.
The game ends when there are three of the same (non-empty) character filling any row, column, or diagonal.
The game also ends if all squares are non-empty.
No more moves can be played if the game is over.
Given a 2D integer array moves where moves[i] = [rowi, coli] indicates that the ith move will be played on grid[rowi][coli]. return the winner of the game if it exists (A or B). In case the game ends in a draw return "Draw". If there are still movements to play return "Pending".

You can assume that moves is valid (i.e., it follows the rules of Tic-Tac-Toe), the grid is initially empty, and A will play first.


code


class Solution {
    public String winner(char[][] board)
    {
        //check all rows
        for(int i=0;i<3;i++)
        {
            int countA=0;
            int countB=0;

            for(int j=0;j<3;j++)
            {
                if(board[i][j]=='X')countA++;
                if(board[i][j]=='O')countB++;
            }

            if(countA==3)return "A";
            if(countB==3)return "B";
        }

        //check all colummns
          for(int j=0;j<3;j++)
        {
            int countA=0;
            int countB=0;

            for(int i=0;i<3;i++)
            {
                if(board[i][j]=='X')countA++;
                if(board[i][j]=='O')countB++;
            }

            if(countA==3)return "A";
            if(countB==3)return "B";
        }
        
        //check both diagonals

        if(board[0][0]=='X' && board[1][1]=='X' && board[2][2]=='X')return "A";
        if(board[0][0]=='O' && board[1][1]=='O' && board[2][2]=='O')return "B";

        if(board[0][2]=='X' && board[1][1]=='X' && board[2][0]=='X') return "A";
        if(board[0][2]=='O' && board[1][1]=='O' && board[2][0]=='O') return "B";

        //check for pending or draw

        int count =0;
        for(int i=0;i<3;i++)
        {
            for(int j=0;j<3;j++)
            {
                if(board[i][j]=='X' || board[i][j]=='O')count++;
            }
        }        

        if(count!=9) return "Pending";

        return "Draw";
    }

    public String tictactoe(int[][] moves) {
        
        char[][] board = new char[3][3];

        //creating the board.
        for(int i=0;i<3;i++)
        {
            for(int j=0;j<3;j++)
            {
                board[i][j] ='.';
            }
        }

        //initialising the board
        for(int i=0;i<moves.length;i++)
        {
            if(i%2==0)
            {
                board[moves[i][0]][moves[i][1]]='X';
            }
            else{
                 board[moves[i][0]][moves[i][1]]='O';
            }
        }

        return winner(board);

    }
}
